<?php

namespace DoctrineProxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Aircraft extends \App\Entity\Aircraft implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Aircraft' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Aircraft' . "\0" . 'acReg', '' . "\0" . 'App\\Entity\\Aircraft' . "\0" . 'raport'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Aircraft' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Aircraft' . "\0" . 'acReg', '' . "\0" . 'App\\Entity\\Aircraft' . "\0" . 'raport'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Aircraft $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getRaport(): \App\Entity\Raport
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRaport', []);

        return parent::getRaport();
    }

    /**
     * {@inheritDoc}
     */
    public function setRaport($raport)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRaport', [$raport]);

        return parent::setRaport($raport);
    }

    /**
     * {@inheritDoc}
     */
    public function getId(): int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId(int $id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getAcReg(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAcReg', []);

        return parent::getAcReg();
    }

    /**
     * {@inheritDoc}
     */
    public function setAcReg(string $acReg)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAcReg', [$acReg]);

        return parent::setAcReg($acReg);
    }

    /**
     * {@inheritDoc}
     */
    public function hydrate(array $data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hydrate', [$data]);

        return parent::hydrate($data);
    }

    /**
     * {@inheritDoc}
     */
    public function notifications()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'notifications', []);

        return parent::notifications();
    }

    /**
     * {@inheritDoc}
     */
    public function readNotifications()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'readNotifications', []);

        return parent::readNotifications();
    }

    /**
     * {@inheritDoc}
     */
    public function unreadNotifications()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'unreadNotifications', []);

        return parent::unreadNotifications();
    }

    /**
     * {@inheritDoc}
     */
    public function notify($instance)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'notify', [$instance]);

        return parent::notify($instance);
    }

    /**
     * {@inheritDoc}
     */
    public function notifyNow($instance, array $channels = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'notifyNow', [$instance, $channels]);

        return parent::notifyNow($instance, $channels);
    }

    /**
     * {@inheritDoc}
     */
    public function routeNotificationFor($driver, $notification = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'routeNotificationFor', [$driver, $notification]);

        return parent::routeNotificationFor($driver, $notification);
    }

}
